
LedBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000158  2**0
                  ALLOC
  2 .stab         00000bac  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000084c  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	47 c0       	rjmp	.+142    	; 0x9a <__vector_5>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a1 36       	cpi	r26, 0x61	; 97
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	14 d0       	rcall	.+40     	; 0x68 <main>
  40:	4f c0       	rjmp	.+158    	; 0xe0 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <sleep>:

volatile bits_t frameBuffer[1];


void sleep(uint8_t millisec){
	while(millisec){
  44:	07 c0       	rjmp	.+14     	; 0x54 <sleep+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	e9 ef       	ldi	r30, 0xF9	; 249
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	31 97       	sbiw	r30, 0x01	; 1
  4c:	f1 f7       	brne	.-4      	; 0x4a <sleep+0x6>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <sleep+0xc>
  50:	00 00       	nop
		_delay_ms(1);
		millisec--;
  52:	81 50       	subi	r24, 0x01	; 1

volatile bits_t frameBuffer[1];


void sleep(uint8_t millisec){
	while(millisec){
  54:	81 11       	cpse	r24, r1
  56:	f7 cf       	rjmp	.-18     	; 0x46 <sleep+0x2>
		_delay_ms(1);
		millisec--;
	}
}
  58:	08 95       	ret

0000005a <timer>:

void timer(void)
{
	TCCR1A = 0x00;                //Timer counter control register
  5a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (0 << WGM02)|(1 << CS02)|(0 << CS01)|(0 << CS00); // WGM=0, prescale at 8
  5c:	84 e0       	ldi	r24, 0x04	; 4
  5e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1);         //Set bit 1 in TIMSK to enable Timer 1 overflow interrupt.
  60:	89 b7       	in	r24, 0x39	; 57
  62:	80 68       	ori	r24, 0x80	; 128
  64:	89 bf       	out	0x39, r24	; 57
  66:	08 95       	ret

00000068 <main>:
}

int main(){

	timer();
  68:	f8 df       	rcall	.-16     	; 0x5a <timer>
	sei();
  6a:	78 94       	sei

		//dirPort &=~(1<<outPinX);//input triz
		//dirPort |=(1<<outPinX); //output


		dirPort &=~(1<<outPin0);//triz
  6c:	8b 98       	cbi	0x11, 3	; 17
		dirPort |=(1<<outPin1);
  6e:	8c 9a       	sbi	0x11, 4	; 17
		dirPort |=(1<<outPin2);
  70:	8d 9a       	sbi	0x11, 5	; 17

		//LED 0
		out1 = ON;
  72:	94 9a       	sbi	0x12, 4	; 18
		out2 = OFF;
  74:	95 98       	cbi	0x12, 5	; 18
		sleep(255);
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	e5 df       	rcall	.-54     	; 0x44 <sleep>

		//LED1
		out1 = OFF;
  7a:	94 98       	cbi	0x12, 4	; 18
		out2 = ON;
  7c:	95 9a       	sbi	0x12, 5	; 18
		sleep(255);
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	e1 df       	rcall	.-62     	; 0x44 <sleep>

		dirPort |=(1<<outPin0);
  82:	8b 9a       	sbi	0x11, 3	; 17
		dirPort &=~(1<<outPin1);//triz
  84:	8c 98       	cbi	0x11, 4	; 17
		dirPort |=(1<<outPin2);
  86:	8d 9a       	sbi	0x11, 5	; 17

		//LED 3
		out0 = ON;
  88:	93 9a       	sbi	0x12, 3	; 18
		out2 = OFF;
  8a:	95 98       	cbi	0x12, 5	; 18
		sleep(255);
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	da df       	rcall	.-76     	; 0x44 <sleep>

		//LED4
		out0 = OFF;
  90:	93 98       	cbi	0x12, 3	; 18
		out2 = ON;
  92:	95 9a       	sbi	0x12, 5	; 18
		sleep(255);
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	d6 df       	rcall	.-84     	; 0x44 <sleep>
  98:	e9 cf       	rjmp	.-46     	; 0x6c <main+0x4>

0000009a <__vector_5>:
	}

}

ISR (TIMER1_OVF_vect)
{
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	8f 93       	push	r24
	out0 = fb.bit0 ;
  a6:	80 91 60 00 	lds	r24, 0x0060
  aa:	80 fd       	sbrc	r24, 0
  ac:	93 9a       	sbi	0x12, 3	; 18
  ae:	80 ff       	sbrs	r24, 0
  b0:	93 98       	cbi	0x12, 3	; 18
	out1 = fb.bit1 ;
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	86 95       	lsr	r24
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	80 fd       	sbrc	r24, 0
  bc:	94 9a       	sbi	0x12, 4	; 18
  be:	80 ff       	sbrs	r24, 0
  c0:	94 98       	cbi	0x12, 4	; 18
	out2 = fb.bit2 ;
  c2:	80 91 60 00 	lds	r24, 0x0060
  c6:	82 fb       	bst	r24, 2
  c8:	88 27       	eor	r24, r24
  ca:	80 f9       	bld	r24, 0
  cc:	80 fd       	sbrc	r24, 0
  ce:	95 9a       	sbi	0x12, 5	; 18
  d0:	80 ff       	sbrs	r24, 0
  d2:	95 98       	cbi	0x12, 5	; 18
}
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
