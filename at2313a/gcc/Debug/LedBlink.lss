
LedBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000140  2**0
                  ALLOC
  2 .stab         00000b34  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000084d  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	3a c0       	rjmp	.+116    	; 0x82 <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a1 36       	cpi	r26, 0x61	; 97
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	14 d0       	rcall	.+40     	; 0x68 <main>
  40:	43 c0       	rjmp	.+134    	; 0xc8 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <sleep>:

volatile bits_t frameBuffer[1];


void sleep(uint8_t millisec){
    while(millisec){
  44:	07 c0       	rjmp	.+14     	; 0x54 <sleep+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	e9 ef       	ldi	r30, 0xF9	; 249
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	31 97       	sbiw	r30, 0x01	; 1
  4c:	f1 f7       	brne	.-4      	; 0x4a <sleep+0x6>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <sleep+0xc>
  50:	00 00       	nop
        _delay_ms(1);
        millisec--;
  52:	81 50       	subi	r24, 0x01	; 1

volatile bits_t frameBuffer[1];


void sleep(uint8_t millisec){
    while(millisec){
  54:	81 11       	cpse	r24, r1
  56:	f7 cf       	rjmp	.-18     	; 0x46 <sleep+0x2>
        _delay_ms(1);
        millisec--;
    }
}
  58:	08 95       	ret

0000005a <timer0>:

void timer0(void)
{
   TCCR0A = 0x00;                //Timer counter control register
  5a:	10 be       	out	0x30, r1	; 48
   TCCR0B = (0 << WGM02)|(1 << CS02)|(0 << CS01)|(0 << CS00); // WGM=0, prescale at 8
  5c:	84 e0       	ldi	r24, 0x04	; 4
  5e:	83 bf       	out	0x33, r24	; 51
         TIMSK |= (1 << TOIE0);         //Set bit 1 in TIMSK to enable Timer 1 overflow interrupt.
  60:	89 b7       	in	r24, 0x39	; 57
  62:	82 60       	ori	r24, 0x02	; 2
  64:	89 bf       	out	0x39, r24	; 57
  66:	08 95       	ret

00000068 <main>:
    }

int main(){

    timer0();
  68:	f8 df       	rcall	.-16     	; 0x5a <timer0>


    while(1){


    dirPort &=~(1<<outPin0);
  6a:	8b 98       	cbi	0x11, 3	; 17
    dirPort |=(1<<outPin1);
  6c:	8c 9a       	sbi	0x11, 4	; 17
    dirPort |=(1<<outPin2);
  6e:	8d 9a       	sbi	0x11, 5	; 17

        out1 = ON;
  70:	94 9a       	sbi	0x12, 4	; 18
        out2 = OFF;
  72:	93 98       	cbi	0x12, 3	; 18
        sleep(255);
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	e6 df       	rcall	.-52     	; 0x44 <sleep>

        out1 = OFF;
  78:	94 98       	cbi	0x12, 4	; 18
        out2 = ON;
  7a:	93 9a       	sbi	0x12, 3	; 18
        sleep(255);
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	e2 df       	rcall	.-60     	; 0x44 <sleep>
  80:	f4 cf       	rjmp	.-24     	; 0x6a <main+0x2>

00000082 <__vector_6>:
        }

}

ISR (TIMER0_OVF_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
	out0 = fb.bit0 ;
  8e:	80 91 60 00 	lds	r24, 0x0060
  92:	80 fd       	sbrc	r24, 0
  94:	95 9a       	sbi	0x12, 5	; 18
  96:	80 ff       	sbrs	r24, 0
  98:	95 98       	cbi	0x12, 5	; 18
	out1 = fb.bit1 ;
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	86 95       	lsr	r24
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	80 fd       	sbrc	r24, 0
  a4:	94 9a       	sbi	0x12, 4	; 18
  a6:	80 ff       	sbrs	r24, 0
  a8:	94 98       	cbi	0x12, 4	; 18
	out2 = fb.bit2 ;
  aa:	80 91 60 00 	lds	r24, 0x0060
  ae:	82 fb       	bst	r24, 2
  b0:	88 27       	eor	r24, r24
  b2:	80 f9       	bld	r24, 0
  b4:	80 fd       	sbrc	r24, 0
  b6:	93 9a       	sbi	0x12, 3	; 18
  b8:	80 ff       	sbrs	r24, 0
  ba:	93 98       	cbi	0x12, 3	; 18
}
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
